version: '3.8'

services:
  # Kong database
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    ports:
      - "5432:5432"
    volumes:
      - kong-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong migration service
  kong-migration:
    image: kong:3.4.1
    command: kong migrations bootstrap
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong

  # Kong gateway service
  kong:
    image: kong:3.4.1
    container_name: kong
    restart: always
    depends_on:
      - kong-database
      - kong-migration
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "8000:8000"  # Kong proxy port
      - "8443:8443"  # Kong proxy SSL port
      - "8001:8001"  # Kong admin API
      - "8444:8444"  # Kong admin API SSL
    volumes:
      - ./kong.yml:/etc/kong/kong.yml:ro
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth service
  auth-service:
    build:
      context: ./backend
      dockerfile: Auth.Dockerfile
    container_name: auth-service
    restart: always
    environment:
      SECRET_KEY: "your-secret-key"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "30"
    expose:
      - 8000

  # Product service
  product-service:
    build:
      context: ./backend
      dockerfile: Product.Dockerfile
    container_name: product-service
    restart: always
    expose:
      - 8000

  # Orders service
  orders-service:
    build:
      context: ./backend
      dockerfile: Orders.Dockerfile
    container_name: orders-service
    restart: always
    expose:
      - 8000

  # Database service
  database-service:
    build:
      context: ./backend
      dockerfile: Database.Dockerfile
    container_name: database-service
    restart: always
    expose:
      - 8001

  # Postgres for application
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      
  # Konga - Kong Admin UI
  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: always
    environment:
      NODE_ENV: development
    ports:
      - "1337:1337"
    depends_on:
      - kong
    volumes:
      - konga-data:/data

  # Prometheus - Monitoring system and time series database
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    depends_on:
      - auth-service
      - product-service
      - orders-service
      - database-service

  # Grafana - Metrics dashboard and visualization tool
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  # Node Exporter - System metrics exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"

  # cAdvisor - Container metrics exporter
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    depends_on:
      - redis

  # Redis for cAdvisor rate limit protection
  redis:
    image: redis:latest
    container_name: redis
    restart: always

volumes:
  kong-data:
  postgres-data:
  konga-data:
  prometheus-data:
  grafana-data: